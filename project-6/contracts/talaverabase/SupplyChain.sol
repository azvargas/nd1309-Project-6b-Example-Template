pragma solidity >=0.4.24;

import "../talaveracontrol/WorkshopRole.sol";
import "../talaveracontrol/RetailerRole.sol";
import "../talaveracontrol/CustomerRole.sol";

// Define a contract 'Supplychain'

contract SupplyChain is WorkshopRole, RetailerRole, CustomerRole {

  // Define '_owner'
  address payable _owner;

  // Define a variable called 'upc' for Universal Product Code (UPC)
  uint upc;

  // Define a variable called 'sku' for Stock Keeping Unit (SKU)
  uint sku;

  // Define a public mapping 'items' that maps the UPC to an Item.
  mapping (uint => Item) items;

  // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash, 
  // that track its journey through the supply chain -- to be sent from DApp.
  mapping (uint => string[]) itemsHistory;
  
  // Define enum 'State' with the following values:
  enum State 
  { 
    Created,   // 0
    Stored,    // 1
    Shipped,   // 2
    Received,  // 3
    ForSale,   // 4
    Sold       // 5
  }

  State constant defaultState = State.Created;

  // Define a struct 'Item' with the following fields:
  struct Item {
    uint            sku;  // Stock Keeping Unit (SKU)
    uint            upc; // Universal Product Code (UPC), generated by the workshop, goes on the package, can be verified by the Customer
    address         ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 8 stages
    address payable originWorkshopID; // Metamask-Ethereum address of the Workshop
    string          originWorkshopName; // Workshop Name
    uint            productID;  // Product ID potentially a combination of upc + sku
    string          productNotes; // Product Notes
    uint            productPrice; // Product Price
    State           itemState;  // Product State as represented in the enum above
    address         retailerID; // Metamask-Ethereum address of the Retailer
    address payable customerID; // Metamask-Ethereum address of the Customer
  }

  // Define 6 events with the same 6 state values and accept 'upc' as input argument
  event Created(uint upc);
  event Stored(uint upc);
  event Shipped(uint upc);
  event Received(uint upc);
  event ForSale(uint upc);
  event Sold(uint upc);

  // Define a modifer that checks to see if msg.sender == owner of the contract
  /*
  modifier onlyOwner() {
    require(msg.sender == _owner, "The caller is not the owner of the contract");
    _;
  }
*/

  // Define a modifer that verifies the Caller
  modifier verifyCaller (address _address) {
    require(msg.sender == _address, "The caller is not the owner ob the piece"); 
    _;
  }

  // Define a modifier that checks if the paid amount is sufficient to cover the price
  modifier paidEnough(uint _price) { 
    require(msg.value >= _price); 
    _;
  }
  
  // Define a modifier that checks the price and refunds the remaining balance
  modifier checkValue(uint _upc) {
    _;
    uint _price = items[_upc].productPrice;
    uint amountToReturn = msg.value - _price;
    items[_upc].customerID.transfer(amountToReturn);
  }

  // Define a modifier that checks if an item.state of a upc is Created
  modifier created(uint _upc) {
    require(items[_upc].itemState == State.Created, "The item is not in state Created");
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Stored
  modifier stored(uint _upc) {
    require(items[_upc].itemState == State.Stored, "The item is not in state Stored");
    _;
  }
  
  // Define a modifier that checks if an item.state of a upc is Shipped
  modifier shipped(uint _upc) {
    require(items[_upc].itemState == State.Shipped, "The item is not in state Shipped");
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Received
  modifier received(uint _upc) {
    require(items[_upc].itemState == State.Received, "The item is not in state Received");
    _;
  }

  // Define a modifier that checks if an item.state of a upc is PutToSale
  modifier putToSale(uint _upc) {
    require(items[_upc].itemState == State.ForSale, "The item is not in state ForSale");
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Sold
  modifier sold(uint _upc) {
    require(items[_upc].itemState == State.Sold, "The item is not in state Sold");
    _;
  }

  // In the constructor set 'owner' to the address that instantiated the contract
  // and set 'sku' to 1
  // and set 'upc' to 1
  constructor() public payable {
    _owner = payable(msg.sender);
    sku = 1;
    upc = 1;
  }

  // Define a function 'kill' if required
  function kill() public {
    if (msg.sender == _owner) {
      selfdestruct(_owner);
    }
  }

  // Define a function 'createItem' that allows a workshop to mark an item 'Created'
  function createItem(uint _upc, address _originWorkshopID, string memory _originWorkshopName, string memory _productNotes) public onlyWorkshop()
  {
    // Add the new item as part of Create
    Item storage newItem = items[_upc];
    newItem.sku = sku;
    newItem.upc = _upc;
    newItem.ownerID = _originWorkshopID;
    newItem.originWorkshopID = payable(_originWorkshopID);
    newItem.originWorkshopName = _originWorkshopName;
    newItem.productID = sku + _upc;
    newItem.productNotes = _productNotes;
    newItem.itemState = defaultState;

    // Increment sku
    sku = sku + 1;

    // Emit the appropriate event
    emit Created(_upc);
  }

  // Define a function 'storeItem' that allows a workshop to mark an item 'Stored'
  function storeItem(uint _upc) public 
  // Call modifier to check if upc has passed previous supply chain stage
  created(_upc)
  // Call modifier to verify caller of this function
  verifyCaller(items[_upc].ownerID)
  onlyWorkshop()
  {
    // Update the appropriate fields
    items[_upc].itemState = State.Stored;
    // Emit the appropriate event
    emit Stored(_upc);
  }

  // Define a function 'shipItem' that allows the workshop to mark an item 'Shipped'
  // Use the above modifers to check if the item is stored
  function shipItem(uint _upc) public 
    // Call modifier to check if upc has passed previous supply chain stage
    stored(_upc)
    // Call modifier to verify caller of this function
    verifyCaller(items[_upc].ownerID)
    onlyWorkshop()
    {
    // Update the appropriate fields
    items[_upc].itemState = State.Shipped;
    // Emit the appropriate event
    emit Shipped(_upc);
  }

  // Define a function 'receiveItem' that allows the retailer to mark an item 'Received'
  // Use the above modifiers to check if the item is shipped
  function receiveItem(uint _upc) public 
    // Call modifier to check if upc has passed previous supply chain stage
    shipped(_upc)
    // Access Control List enforced by calling Smart Contract / DApp
    onlyRetailer()
    {
    // Update the appropriate fields - ownerID, retailerID, itemState
    items[_upc].itemState = State.Received;
    items[_upc].ownerID = msg.sender;
    items[_upc].retailerID = msg.sender;

    // Emit the appropriate event
    emit Received(_upc);
  }

  // Define a function 'sellItem' that allows a workshop to mark an item 'ForSale'
  function sellItem(uint _upc, uint _price) public 
  // Call modifier to check if upc has passed previous supply chain stage
  received(_upc)
  // Call modifier to verify caller of this function
  verifyCaller(items[_upc].ownerID)
  onlyRetailer()
  {
    // Update the appropriate fields
    items[_upc].itemState = State.ForSale;
    items[_upc].productPrice = _price;
    
    // Emit the appropriate event
    emit ForSale(_upc);
  }

  // Define a function 'buyItem' that allows the customer to mark an item 'Sold'
  // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough, 
  // and any excess ether sent is refunded back to the buyer
  function buyItem(uint _upc) public payable 
    // Call modifier to check if upc has passed previous supply chain stage
    putToSale(_upc)
    // Call modifer to check if buyer has paid enough
    paidEnough(msg.value)
    // Call modifer to send any excess ether back to buyer
    // checkValue(_upc)
    onlyCustomer()
    {
    
    // Update the appropriate fields - ownerID, itemState
    items[_upc].ownerID = msg.sender;
    items[_upc].itemState = State.Sold;
    items[_upc].customerID = payable(msg.sender);

    // Transfer money to workshop
    items[_upc].originWorkshopID.transfer(items[_upc].productPrice);

    // send any excess ether back to buyer
    uint _price = items[_upc].productPrice;
    uint amountToReturn = msg.value - _price;
    items[_upc].customerID.transfer(amountToReturn);

    // emit the appropriate event
    emit Sold(_upc);
  }

  // Define a function 'fetchItemBufferOne' that fetches the data
  function fetchItemBufferOne(uint _upc) public view returns 
  (
  uint    itemSKU,
  uint    itemUPC,
  address ownerID,
  address payable originWorkshopID,
  string memory   originWorkshopName
  ) 
  {
  // Assign values to the 8 parameters
  itemSKU = items[_upc].sku;
  itemUPC = items[_upc].upc;
  ownerID = items[_upc].ownerID;
  originWorkshopID = items[_upc].originWorkshopID;
  originWorkshopName = items[_upc].originWorkshopName;
  return 
  (
  itemSKU,
  itemUPC,
  ownerID,
  originWorkshopID,
  originWorkshopName
  );
  }

  // Define a function 'fetchItemBufferTwo' that fetches the data
  function fetchItemBufferTwo(uint _upc) public view returns 
  (
  uint    itemSKU,
  uint    itemUPC,
  uint    productID,
  string memory productNotes,
  uint    productPrice,
  State   itemState,
  address retailerID,
  address customerID
  ) 
  {
    // Assign values to the 9 parameters
  itemSKU = items[_upc].sku;
  itemUPC = items[_upc].upc;
  productID = items[_upc].productID;
  productNotes = items[_upc].productNotes;
  productPrice = items[_upc].productPrice;
  itemState = items[_upc].itemState;
  retailerID = items[_upc].retailerID;
  customerID = items[_upc].customerID;  
  return 
  (
  itemSKU,
  itemUPC,
  productID,
  productNotes,
  productPrice,
  itemState,
  retailerID,
  customerID
  );
  }
}
